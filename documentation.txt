 ____  ____   _    ____ _____   ____   ___   ____ _  ______  _
/ ___||  _ \ / \  / ___| ____| |  _ \ / _ \ / ___| |/ / ___|| |
\___ \| |_) / _ \| |   |  _|   | |_) | | | | |   | ' /\___ \| |
 ___) |  __/ ___ \ |___| |___  |  _ <| |_| | |___| . \ ___) |_|
|____/|_| /_/   \_\____|_____| |_| \_\\___/ \____|_|\_\____/(_)

##############################################################################

Table of contents:

    Class Bullet ---------- line: 23
    
    Class Parent ---------- line: 43
    
    Class Player ---------- line: 57
    
    Class Big_asteroid ---- line: 83
    
    Class Small_asteroid -- line: 105

##############################################################################

Class Bullet(color, size_x/y, location, speed):

	Init:
		Defs the constants
	
	Move:
		Does the calculations for moving, will be the first thing called in main.

	Collide:
		Will be called by other objects such as asteroids, it uses the built-in __del__() 
		Function, but first it removes itself from the parent class

	Wall collide:
		Check if itself is colliding with the wall and if so then it calls collide.

	Main:
		move()
		Wall collide()
##############################################################################

Class Parent()

	Init:
		Names all the constants for the entire game, sizes, collor

	Add object:
		May be multiple functions for the different classes, it adds each new object to the 
		List it has of objects.

	Remove object:
		Removes an object from the lists of objects, maybe split up into multiple 
		Functions for each of the classes
##############################################################################

Class Player(parent object, x, y):

	Init:
		Runs its own init and the init of parent class

	Move: 
		Does the display stuff and the calculations

	Collision detection:
		Does the calculations to determine whether or not the player is colliding with 
		Something, if it goes off the screen it wraps around

	Button detection:
		Does exactly what it sounds like it does

	Fire:
		Spawns a new bullet using the bullet class inside of the parent object
		Then gives the new bullet object to parent class using add object()

	Main:
		move()
		collision()
		Button detection()
		fire()
##############################################################################

Class Big_asteroid:

    Init:
        runs the init functions of the parent class and defines the parent object
        
    Move:
        does the calculations for moving it image and it cordinates
        
         Collision:
        checks to see if it is colliding with a bullet, (or player if I decide to 
        do that) and if so, it delets the bullet object and delets itself, after 
        from 1-3 new small asteroid objects.
        
    Kill:
        this is the function that is called by collision if it is colliding, it delets
        the bullet and spawns 1-3 new small asteroids, then it kils itself.
        
    Main:
        Move()
        Collision(which can call Kill())
##############################################################################

Class Small_asteroid:

    Init:
        runs the parent init function.
        
    Move:
        does the calculations to move its image and chang its cordinates
        
    Kill:
        will be called by Collision, it kills the impacting bullet, and then it 
        kill itself.
        
    Collision:
        checks if the asteroid is colliding with a bullet and then calls kill() if
        so.
    
    Main:
        move()
        collision(will call kill if it is colliding)
